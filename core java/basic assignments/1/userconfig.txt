package com.casestudy;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.context.properties.EnableConfigurationProperties;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.authentication.dao.DaoAuthenticationProvider;
import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.NoOpPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.web.util.matcher.AntPathRequestMatcher;

@EnableWebSecurity
public class configspringsecuirt extends WebSecurityConfigurerAdapter {
  @Autowired
  UserDetails userDetailsService;
  
 
  @Override
	protected void configure(AuthenticationManagerBuilder auth)throws Exception
	{
		auth.userDetailsService(userDetailsService);
		
	}
  @Override
  protected void configure(HttpSecurity http) throws Exception {
      http
      .httpBasic()
   .and()
      
      .authorizeRequests()
       
   
         .antMatchers("/admin/**").hasAnyRole("ADMIN")
         .anyRequest().permitAll()
          .and()
          .csrf().disable()
          .formLogin()
          .and()
         .logout()
         .permitAll();
  }
  @Bean
  public PasswordEncoder passwordEncoder() {
      return NoOpPasswordEncoder.getInstance();
  }
  
  
}